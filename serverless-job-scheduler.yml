AWSTemplateFormatVersion: '2010-09-09'
Description: This stack deploys a serverless job scheduling system with components
             Standard VPC with both public and private subnets. 
             A fargate cluster and task definition task definition is created to run a docker container.
             A DynamoDB table to hold job configurations
             A CloudWatch rule calling Job Dispatcher every minute
             A CloudWatch rule triggered by ECS task stopped events - calling Job Monitor Lambda
             3 lambda functions and associated IAM roles/permissions
             - Job Dispatcher (For invoking the job runner lambda)
             - Job Runner (To start a the fargate job runner docker task)
             - Job Monitor (To receive SNS from ECS task stopped)
             
Parameters: 
  AllowedBucket: 
    Type: String             
             
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are four subnets which cover the ranges:
  #
  # 10.10.0.0 - 10.10.0.255
  # 10.10.1.0 - 10.10.1.255
  # 10.10.2.0 - 10.10.2.255
  # 10.10.3.0 - 10.10.3.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.10.0.0/16'
    PublicOne:
      CIDR: '10.10.0.0/24'
    PublicTwo:
      CIDR: '10.10.1.0/24'
    PrivateOne:
      CIDR: '10.10.2.0/24'
    PrivateTwo:
      CIDR: '10.10.3.0/24'
Resources:
  # VPC in which containers will be networked.
  # It has two public subnets, and two private subnets.
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  # Two private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  # VPC Endpoint for DynamoDB
  # If a container needs to access DynamoDB this allows a container in the private subnet
  # to talk to DynamoDB directly without needing to go via the NAT gateway. This reduces
  # the amount of bandwidth through the gateway, meaning that the gateway is free to serve
  # your other traffic.
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Principal: "*"
            Resource: "*"
      RouteTableIds:
        - !Ref 'PrivateRouteTableOne'
        - !Ref 'PrivateRouteTableTwo'
      ServiceName: !Join [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".dynamodb" ] ]
      VpcId: !Ref 'VPC'

  # ECS Cluster (logical) to place fargate tasks
  ECSCluster:
    Type: AWS::ECS::Cluster

  # A security group for the containers we will run in Fargate.
  # Three rules, allowing network traffic from a public facing load
  # balancer, a private internal load balancer, and from other members
  # of the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'
  EcsSecurityGroupIngressFromPrivateALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the private ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'


  # Task Execution role for the running docker container.
  # Add permissions here to access AWS services if required.
  ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: AmazonECSTaskExecutionRolePolicy
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:*'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:ListAllMyBuckets'
                  - 's3:GetBucketLocation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: !Join ['', ['arn:aws:s3:::', Ref: AllowedBucket, '/*']] 

# Log group for the ECS tasks - stdout will go              
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, 'job-scheduler', TaskDefinition]]
  

# ECR Repository to hold the docker container for our running task              
  ECRJobRunnerRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: job-runner
  

  # ECS ask defnition for calling the docker task
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
      # Makes sure the log group is created before it is used.
    DependsOn: [LogGroup,ECRJobRunnerRepository]
    Properties: 
      ContainerDefinitions: 
         - Name: job-runner
           Image: !Sub  '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/job-runner:latest'
           PortMappings:
            - ContainerPort: 80
          # Send logs to CloudWatch Logs
           LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: fargate
      Cpu: 256
      TaskRoleArn: !Ref 'ECSTaskExecutionRole'
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      Family: job-runner-task
      Memory: 2GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE

#
# IAM role to be used by lambda functions for execution
# This might be broken out into specific roles later.
#
  LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              - dynamodb:*
              - iam:PassRole
              - lambda:InvokeFunction
              - ecs:RunTask
              Resource: '*'

#
# Lambda start a fargate docker task and pass to it the job configuration 
#
  JobRunnerLambda:
      Type: AWS::Lambda::Function
      Properties:
        Code: 
          ZipFile: |
            import boto3
            import json
            import os
            import urllib

            CLUSTER_NAME = os.environ["CLUSTER_NAME"]
            SUBNETS = os.environ["SUBNETS"].split(",")
            JOB_CONFIGURATION_TABLE = os.environ["JOB_CONFIGURATION_TABLE"]

            dynamodb = boto3.resource('dynamodb')

            def lambda_handler(event,context):

              print(event)
              jobId = "";
              if 'jobId' in event:
                  jobId = event['jobId']

              print ("Attempting to run job with ID: " + jobId)
              
              # work check condition - this could be anything , polling etc.
              resp = urllib.request.urlopen(event['job_detail']['sourceUrl'])
              print(resp.getcode())

              if resp.getcode()==200:    
                  print ("Work condition satisfied... starting task")
                
                  client = boto3.client('ecs')
                  response = client.run_task(
                  cluster=CLUSTER_NAME, 
                  launchType = 'FARGATE',
                  taskDefinition='job-runner-task',
                  count = 1,
                  platformVersion='LATEST',
                  networkConfiguration={
                        'awsvpcConfiguration': {
                            'subnets': 
                                SUBNETS
                            ,
                            'assignPublicIp': 'ENABLED'
                        }
                    },
                    overrides={"containerOverrides": [{
                            "name": "job-runner",
                            "command": ["python" , "/tmp/run-job.py" , jobId],
                            "environment": [
                                {
                                        'name': 'JOB_DETAIL',
                                        'value': json.dumps(event)
                                }
                
                            ]
                        }]}
                    )
                  
                  print(response)
                  
              else:
                print("No work to do - resetting job status.")
                
                # update the job status in dynamodb so it can run again
                table = dynamodb.Table(JOB_CONFIGURATION_TABLE)
                response = table.update_item(
                  Key={
                      'jobId': jobId
                  },
                  UpdateExpression="set job_status = :js,  last_run_status=:lrs",
                  ExpressionAttributeValues={
                      ':js': "READY",
                      ':lrs': "OK"
                  },
                  ReturnValues="UPDATED_NEW"
                )
                print(response)
                
              return


        Handler: index.lambda_handler
        MemorySize: 128
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: python3.7
        Timeout: 120
        Environment:
          Variables:
            CLUSTER_NAME: !Ref ECSCluster
            SUBNETS: !Ref PrivateSubnetOne
            JOB_CONFIGURATION_TABLE: !Ref JobConfigTable


# Lambda to dispatch scheduled jobs -->Runner Lambda
# Executed a new runner in parallel for each job 
  JobDispatcherLambda:
      Type: AWS::Lambda::Function
      Properties:
        Code: 
          ZipFile: |
            import json

            def lambda_handler(event, context):
                # TODO implement
                return {
                    'statusCode': 200,
                    'body': json.dumps('Hello from Lambda!')
                }

        FunctionName: JobDispatcher
        Handler: index.lambda_handler
        MemorySize: 128
        Role: !GetAtt LambdaExecutionRole.Arn
        ReservedConcurrentExecutions: 1
        Runtime: python3.7
        Timeout: 300
        Environment:
          Variables:
            JOB_RUNNER_LAMBDA: !Ref JobRunnerLambda
            JOB_CONFIGURATION_TABLE: !Ref JobConfigTable

  # Permission to allow Events to invoke Job Monitor
  EventsLambdaMonitorPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref JobMonitorLambda
        Principal: events.amazonaws.com

  # Permission to allow Events to invoke Job Dispatcher
  EventsLambdaDispatcherPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref JobDispatcherLambda
        Principal: events.amazonaws.com


  # Lambda to monitor when jobs havs stopped.
  JobMonitorLambda:
        Type: AWS::Lambda::Function
        Properties:
          Code: 
            ZipFile: |
              import json
              import boto3
              import datetime

              dynamodb = boto3.resource('dynamodb')
              JOB_CONFIGURATION_TABLE = os.environ["JOB_CONFIGURATION_TABLE"]

              def lambda_handler(event, context):
                  print(event)
                  # parse out the jobId from the incoming event
                  detail = event['detail']
                  overrides = detail['overrides']
                  containerOverrides=overrides['containerOverrides']
                  job_detail = json.loads(containerOverrides[0]['environment'][0]['value'])
                  print("Found jobId: " + job_detail['jobId'])
                  
                  # update the job status in dynamodb so it can run again
                  table = dynamodb.Table('job_configuration')
                  response = table.update_item(
                      Key={
                          'jobId': job_detail['jobId']
                      },
                      UpdateExpression="set job_status = :js,  last_run_status=:lrs",
                      ExpressionAttributeValues={
                          ':js': "READY",
                          ':lrs': "OK"
                      },
                      ReturnValues="UPDATED_NEW"
                  )

                  print(response)
                  
                  return


          Handler: index.lambda_handler
          MemorySize: 128
          Role: !GetAtt LambdaExecutionRole.Arn
          Runtime: python3.7
          Timeout: 60          
          Environment:
            Variables:
              JOB_CONFIGURATION_TABLE: !Ref JobConfigTable


  # DynamoDB table to hold the scheduled job configuration
  JobConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: jobId
        AttributeType: S
      KeySchema:
      - AttributeName: jobId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: job_configuration


  # Cloudwatch rule to notify monitor lambda that ECS tasks have stopped.
  JobMonitorRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: Receives SNS from stopped ECS tasks and invokes job monitor lambda.
      EventPattern: 
        {
        "source": [
          "aws.ecs"
        ],
        "detail-type": [
          "ECS Task State Change"
        ],
        "detail": {
          "lastStatus": [
            "STOPPED"
          ],
          "stoppedReason" : [
            "Essential container in task exited"
          ]
        }
        } 
      Name: JobMonitorRule
      Targets: 
        - Arn: !GetAtt JobMonitorLambda.Arn
          Id: JobMonitorLambdaTarget


  JobDispatcherRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: Dispatches overdue jobs
      Name: JobDispatcherRule
      ScheduleExpression: 'rate(1 minute)'
      Targets: 
        - Arn: !GetAtt JobDispatcherLambda.Arn
          Id: JobDispatcherLambdaTarget

# Stack outputs
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetOne' ] ]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetTwo' ] ]
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'FargateContainerSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'FargateContainerSecurityGroup' ] ]
  ECRJobRunnerRepository:
    Description: ECR Repository for the job runner docker container
    Value: !Ref 'ECRJobRunnerRepository'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'job-runner:latest' ] ]